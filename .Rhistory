SUBSET    <- list()
MODEL     <- list()
result_for_plot <- data.frame(label = NULL,
b     = NULL,
ci.lb = NULL,
ci.ub = NULL,
ES    = NULL,
L     = NULL,
U     = NULL)
for (i in 1:length(predictors_to_analyse)){
#subset the predictor
data_i  <- db_metafor[db_metafor$Response_Group == predictors_to_analyse[i], ]
#fitting the model
model_i <- rma.mv(yi, vi, random =  ~ 1 | ID, data = na.omit(data_i))
#extracting coefficients
result_for_plot_i <- data.frame(label = paste(predictors_to_analyse[i]," (" ,
nrow(data_i),", ",
length(unique(data_i$ID)),")",sep=''),
b     = model_i$b,
ci.lb = model_i$ci.lb,
ci.ub = model_i$ci.ub,
ES    = ((exp(model_i$b)-1))/((exp(model_i$b)+1)),
L     = ((exp(model_i$ci.lb)-1)/(exp(model_i$ci.lb)+1)),
U     = ((exp(model_i$ci.ub)-1)/(exp(model_i$ci.ub)+1)))
#store the data
SUBSET[[i]]     <- data_i
MODEL[[i]]      <- model_i
result_for_plot <- rbind(result_for_plot,result_for_plot_i)
}
result_for_plot
db_metafor$Response_Group
actions_to_analyse    <- c("Gate", "Disturbance reduction")
predictors_to_analyse <- c("Behavior","Population", "Occupancy")
SUBSET    <- list()
MODEL     <- list()
result_for_plot <- data.frame(label_action = NULL,
label_pred = NULL,
b     = NULL,
ci.lb = NULL,
ci.ub = NULL,
ES    = NULL,
L     = NULL,
U     = NULL)
for (j in 1:length(actions_to_analyse)){
data_j  <- db_metafor[db_metafor$Predictor_Group == actions_to_analyse[j], ]
for (i in 1:length(predictors_to_analyse)){
#subset the predictor
data_i  <- data_j[data_j$Response_Group == predictors_to_analyse[i], ]
#fitting the model
model_i <- rma.mv(yi, vi, random =  ~ 1 | ID, data = na.omit(data_i))
#extracting coefficients
result_for_plot_i <- data.frame(label_action =  actions_to_analyse[j],
label_pred = paste(predictors_to_analyse[i]," (" ,
nrow(data_i),", ",
length(unique(data_i$ID)),")",sep=''),
b     = model_i$b,
ci.lb = model_i$ci.lb,
ci.ub = model_i$ci.ub,
ES    = ((exp(model_i$b)-1))/((exp(model_i$b)+1)),
L     = ((exp(model_i$ci.lb)-1)/(exp(model_i$ci.lb)+1)),
U     = ((exp(model_i$ci.ub)-1)/(exp(model_i$ci.ub)+1)))
#store the data
SUBSET[[i]]     <- data_i
MODEL[[i]]      <- model_i
result_for_plot <- rbind(result_for_plot,result_for_plot_i)
}
}
data_j
actions_to_analyse    <- c("Gate", "Disturbance reduction")
actions_to_analyse
data_j
data_j$Response_Group
data_j  <- db_metafor[db_metafor$Predictor_Group == actions_to_analyse[j], ] ; data_j <- droplevels(data_j)
data_j
data_j$Response_Group
J=1
j=1
data_j  <- db_metafor[db_metafor$Predictor_Group == actions_to_analyse[j], ] ; data_j <- droplevels(data_j)
data_j
data_j$Response_Group
table(data_j$Response_Group)
levels(data_j$Response_Group)
predictors_to_analyse <- levels(data_j$Response_Group)
for (i in 1:length(predictors_to_analyse)){
#subset the predictor
data_i  <- data_j[data_j$Response_Group == predictors_to_analyse[i], ]
#fitting the model
model_i <- rma.mv(yi, vi, random =  ~ 1 | ID, data = na.omit(data_i))
#extracting coefficients
result_for_plot_i <- data.frame(label_action =  actions_to_analyse[j],
label_pred = paste(predictors_to_analyse[i]," (" ,
nrow(data_i),", ",
length(unique(data_i$ID)),")",sep=''),
b     = model_i$b,
ci.lb = model_i$ci.lb,
ci.ub = model_i$ci.ub,
ES    = ((exp(model_i$b)-1))/((exp(model_i$b)+1)),
L     = ((exp(model_i$ci.lb)-1)/(exp(model_i$ci.lb)+1)),
U     = ((exp(model_i$ci.ub)-1)/(exp(model_i$ci.ub)+1)))
#store the data
SUBSET[[i]]     <- data_i
MODEL[[i]]      <- model_i
result_for_plot <- rbind(result_for_plot,result_for_plot_i)
}
result_for_plot
j=2
data_j  <- db_metafor[db_metafor$Predictor_Group == actions_to_analyse[j], ] ; data_j <- droplevels(data_j)
data_j
db_metafor$Predictor_Group
db_metafor$Predictor_Group
db_metafor <- db[db$Tested_statistically == "yes",]
db_metafor <- db_metafor[db_metafor$Pearson_r_conversion == "converted",]
db_metafor <- droplevels(db_metafor)
dim(db_metafor) #2361 standardized estimates
nlevels(db_metafor$ID) #250 references
db_metafor <- db_metafor %>% select(ID,
N,
Domain,
System,
Response_Group,
Predictor_Group,
r = Pearson.s_r)
db_metafor <- escalc(measure = "ZCOR", ri = r, ni = N, data = db_metafor)
table(db_metafor$Predictor_Group,db_metafor$Response_Group) # Disturbance reduction & Gate
db_metafor$Predictor_Group
# Gate
db_metafor <- db_metafor[db_metafor$Predictor_Group == "Gate" | db_metafor$Predictor_Group == "Disturbance reduction",] ; db_metafor <- droplevels(db_metafor)
db_metafor
db_metafor$Response_Group
db_metafor$Predictor_Group
#Check sample size for each predictors
table_n <- data.frame(predictor = NULL, n = NULL, n_papers = NULL)
for(i in 1:length(unique(levels(db_metafor$Response_Group))))
table_n <- rbind(table_n,
data.frame(predictor = levels(db_metafor$Response_Group)[i],
n = nrow(db_metafor[db_metafor$Response_Group == levels(db_metafor$Response_Group)[i], ]),
n_papers = length(unique(db_metafor[db_metafor$Response_Group == levels(db_metafor$Response_Group)[i], ]$ID)))
)
db_metafor$Predictor_Group
actions_to_analyse    <- c("Gate", "Disturbance reduction")
SUBSET    <- list()
MODEL     <- list()
result_for_plot <- data.frame(label_action = NULL,
label_pred = NULL,
b     = NULL,
ci.lb = NULL,
ci.ub = NULL,
ES    = NULL,
L     = NULL,
U     = NULL)
actions_to_analyse    <- c("Gate", "Disturbance reduction")
for (j in 1:length(actions_to_analyse)){
data_j  <- db_metafor[db_metafor$Predictor_Group == actions_to_analyse[j], ] ; data_j <- droplevels(data_j)
predictors_to_analyse <- levels(data_j$Response_Group)
for (i in 1:length(predictors_to_analyse)){
#subset the predictor
data_i  <- data_j[data_j$Response_Group == predictors_to_analyse[i], ]
#fitting the model
model_i <- rma.mv(yi, vi, random =  ~ 1 | ID, data = na.omit(data_i))
#extracting coefficients
result_for_plot_i <- data.frame(label_action =  actions_to_analyse[j],
label_pred = paste(predictors_to_analyse[i]," (" ,
nrow(data_i),", ",
length(unique(data_i$ID)),")",sep=''),
b     = model_i$b,
ci.lb = model_i$ci.lb,
ci.ub = model_i$ci.ub,
ES    = ((exp(model_i$b)-1))/((exp(model_i$b)+1)),
L     = ((exp(model_i$ci.lb)-1)/(exp(model_i$ci.lb)+1)),
U     = ((exp(model_i$ci.ub)-1)/(exp(model_i$ci.ub)+1)))
#store the data
SUBSET[[i]]     <- data_i
MODEL[[i]]      <- model_i
result_for_plot <- rbind(result_for_plot,result_for_plot_i)
}
}
result_for_plot
rownames(result_for_plot) <- NULL
ggplot(data= result_for_plot, aes(x=label, y=ES, ymin=L, ymax=U)) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
labs(title = "Gating")+
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(col= "black", size= 1) +
coord_flip() + theme_bw() # flip coordinates (puts labels on y axis)
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
labs(title = "Gating")+
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= 1) +
coord_flip() + theme_bw() # flip coordinates (puts labels on y axis)
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= 1) +
coord_flip() + theme_bw() # flip coordinates (puts labels on y axis)
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= 1) +
coord_flip() + theme_custom() # flip coordinates (puts labels on y axis)
theme_custom <- function(){
theme_bw() +
theme(#text = element_text(family = "Arial"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "bottom",
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "transparent",
size = 2, linetype = "blank"))
}
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= 1) +
coord_flip() + theme_custom() # flip coordinates (puts labels on y axis)
theme_bw() +
theme(#text = element_text(family = "Arial"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "transparent",
size = 2, linetype = "blank"))
theme_custom <- function(){
theme_bw() +
theme(#text = element_text(family = "Arial"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = "top",
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "transparent",
size = 2, linetype = "blank"))
}
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= 1) +
coord_flip() + theme_custom() # flip coordinates (puts labels on y axis)
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= 1) +
scale_color_manual(values = "grey10", "purple")
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= 1) +
scale_color_manual(values = c("grey10", "purple"))+
coord_flip() + theme_custom() # flip coordinates (puts labels on y axis)
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= 1) +
scale_color_manual(values = c("darkmagenta","grey10"))+
coord_flip() + theme_custom() # flip coordinates (puts labels on y axis)
ggplot(data= result_for_plot) +
geom_hline(yintercept=0, lty=2) +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size= .5) +
scale_color_manual(values = c("darkmagenta","grey10"))+
coord_flip() + theme_custom() # flip coordinates (puts labels on y axis)
levels(db$Higher_Geography)
pie1 <- semi_colon_splitter(input1 = db$Higher_Geography,
input2 = db$Tested_statistically,
names = c("Higher_Geography","Tested_statistically"))
#summary stats
table(pie1$Higher_Geography) # tot
table(pie1$Higher_Geography)/sum(table(pie1$Higher_Geography)) # %
pie_1 <- data.frame(table(pie1$Higher_Geography,pie1$Tested_statistically))
radius <- data.frame(sqrt(table(pie1$Higher_Geography))) ; rownames(radius) <- NULL
n <- data.frame(table(pie1$Higher_Geography)) ; rownames(radius) <- NULL
pie <- data.frame(region = levels(pie_1$Var1),
n =  n$Freq,
long  = c(35, 140.0, -154.0, 82.0, -106.0, -57.0, 22.0),
lat  = c(2, -23.5, 21, 27.0, 49.0, -17.0, 49.0),
no = pie_1$Freq[1:nlevels(pie_1$Var1)],
yes = pie_1$Freq[c(nlevels(pie_1$Var1)+1):c(nrow(pie_1))],
radius = radius$Freq)
# Loading data
world <- map_data("world")
biog_regions <- raster::shapefile("Biogeographic_regions/regioni biogeografiche_Biological Review.shp")
map1 <- ggplot() +
geom_map(map = world, data = world,
aes(map_id = region),
color = "gray45", fill = "gray45", size = 0.3) +
labs(title = NULL) +
#Add bioregion
geom_path(data = fortify(biog_regions),
aes(x = long, y = lat, group = group),
color = 'grey70', size = .2) +
#global
annotate(geom="text", x=-154, y=35, label="Global",
color="black")+
#Palearctic
annotate(geom="text", x=24, y=84, label="Palearctic",
color="black")+
#Nearctic
annotate(geom="text", x=-108, y=84, label="Nearctic",
color="black")+
#Neotropical
annotate(geom="text", x=-26.5, y=-28, label="Neotropical",
color="black")+
#Afrotropical
annotate(geom="text", x=62, y=-3, label="Afrotropical",
color="black")+
#Afrotropical
annotate(geom="text", x=86, y=39, label="Indomalaysian",
color="black")+
#Australasian
annotate(geom="text", x=178, y=-29, label="Australasian",
color="black")+
theme_bw() +
theme(
axis.text.x  = element_blank(),
axis.text.y  = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1,1,1,1), 'cm'),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = c(0.1, 0.2),
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "white",
size = 2, linetype = "blank"))
(map2 <- map1 + geom_scatterpie(aes(x=long, y=lat, group=region, r=radius),
data=pie, cols = c("no","yes"), color=NA, alpha=.9) +
geom_scatterpie_legend(pie$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(pie$n),max(pie$n)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",labels=c("Not tested", "Tested"),values=col_fig2)
+ theme(legend.position = "top"))
# Loading data
world <- map_data("world")
map1 <- ggplot() +
geom_map(map = world, data = world,
aes(map_id = region),
color = "gray45", fill = "gray45", size = 0.3) +
labs(title = NULL) +
#Add bioregion
# geom_path(data = fortify(biog_regions),
#         aes(x = long, y = lat, group = group),
#         color = 'grey70', size = .2) +
#global
annotate(geom="text", x=-154, y=35, label="Global",
color="black")+
#Palearctic
annotate(geom="text", x=24, y=84, label="Palearctic",
color="black")+
#Nearctic
annotate(geom="text", x=-108, y=84, label="Nearctic",
color="black")+
#Neotropical
annotate(geom="text", x=-26.5, y=-28, label="Neotropical",
color="black")+
#Afrotropical
annotate(geom="text", x=62, y=-3, label="Afrotropical",
color="black")+
#Afrotropical
annotate(geom="text", x=86, y=39, label="Indomalaysian",
color="black")+
#Australasian
annotate(geom="text", x=178, y=-29, label="Australasian",
color="black")+
theme_bw() +
theme(
axis.text.x  = element_blank(),
axis.text.y  = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1,1,1,1), 'cm'),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = c(0.1, 0.2),
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "white",
size = 2, linetype = "blank"))
(map2 <- map1 + geom_scatterpie(aes(x=long, y=lat, group=region, r=radius),
data=pie, cols = c("no","yes"), color=NA, alpha=.9) +
geom_scatterpie_legend(pie$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(pie$n),max(pie$n)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",labels=c("Not tested", "Tested"),values=col_fig2)
+ theme(legend.position = "top"))
col_fig2 = c("darkmagenta","grey10")
# Loading data
world <- map_data("world")
map1 <- ggplot() +
geom_map(map = world, data = world,
aes(map_id = region),
color = "gray45", fill = "gray45", size = 0.3) +
labs(title = NULL) +
#Add bioregion
# geom_path(data = fortify(biog_regions),
#         aes(x = long, y = lat, group = group),
#         color = 'grey70', size = .2) +
#global
annotate(geom="text", x=-154, y=35, label="Global",
color="black")+
#Palearctic
annotate(geom="text", x=24, y=84, label="Palearctic",
color="black")+
#Nearctic
annotate(geom="text", x=-108, y=84, label="Nearctic",
color="black")+
#Neotropical
annotate(geom="text", x=-26.5, y=-28, label="Neotropical",
color="black")+
#Afrotropical
annotate(geom="text", x=62, y=-3, label="Afrotropical",
color="black")+
#Afrotropical
annotate(geom="text", x=86, y=39, label="Indomalaysian",
color="black")+
#Australasian
annotate(geom="text", x=178, y=-29, label="Australasian",
color="black")+
theme_bw() +
theme(
axis.text.x  = element_blank(),
axis.text.y  = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1,1,1,1), 'cm'),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = c(0.1, 0.2),
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "white",
size = 2, linetype = "blank"))
(map2 <- map1 + geom_scatterpie(aes(x=long, y=lat, group=region, r=radius),
data=pie, cols = c("no","yes"), color=NA, alpha=.9) +
geom_scatterpie_legend(pie$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(pie$n),max(pie$n)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",labels=c("Not tested", "Tested"),values=col_fig2)
+ theme(legend.position = "top"))
