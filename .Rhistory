db <- db[db$Taxon_Group == "Bats",] ; db <- droplevels(db)
#Database only with distinct paper
db_unique <- distinct(db, ID, .keep_all = TRUE)
#Checking levels of factors
levels(db$Taxon_Group)
levels(db$Tested_statistically)
levels(db$Higher_Geography)
levels(db$System)
levels(db$Domain)
levels(db$Impact)
levels(db$Conservation_Group)
levels(db$Conservation_Action)
#Type of actions
table(db$Publication_type)
#Summary statistics (Literature)
table(db_unique$Source) ; sum(table(db_unique$Source)) # N° of unique sources
mean(table(db$ID)) ; SE(table(db$ID)) # mean number of actions/paper
#Summary statistics (Testing)
table(db$Tested_statistically)[2] / sum(table(db$Tested_statistically)) #N° and % testing
db_full <-
read.csv(
file = "Data/Master_Database_Cave_Conservation.csv",
sep = '\t',
dec = ',',
header = TRUE,
as.is = FALSE
)
# Removing duplicates
db_full <- db_full[db_full$Remove != "yes",] ; db_full <- droplevels(db_full)
#Subselecting BAT studies
db <- db_full[db_full$Bat_analysis == "yes",] ; db <- droplevels(db)
db$N <- as.numeric(db$N)
# How many study consider bats and other groups?
a <- ifelse(table(db$ID, db$Taxon_Group)>0,1,0)
table(rowSums(a))
sum(table(rowSums(a))[c(2,3)])/sum(table(rowSums(a)))*100 #3.87 % of studies consider multiple organisms
# Selecting only bats
db <- db[db$Taxon_Group == "Bats",] ; db <- droplevels(db)
#Database only with distinct paper
db_unique <- distinct(db, ID, .keep_all = TRUE)
#Checking levels of factors
levels(db$Taxon_Group)
levels(db$Tested_statistically)
levels(db$Higher_Geography)
levels(db$System)
levels(db$Domain)
levels(db$Impact)
levels(db$Conservation_Group)
levels(db$Conservation_Action)
#Type of actions
table(db$Publication_type)
#Summary statistics (Literature)
table(db_unique$Source) ; sum(table(db_unique$Source)) # N° of unique sources
mean(table(db$ID)) ; SE(table(db$ID)) # mean number of actions/paper
#Summary statistics (Testing)
table(db$Tested_statistically)[2] / sum(table(db$Tested_statistically)) #N° and % testing
levels(db$Impact)
#Redefining levels
levels(db$Impact)[2] <- "Multiple"
levels(db$Conservation_Action)[5] <- "Gating"
levels(bar_2$Impact)
levels(bar_2$Impact)
# Action by region
geo_impact <- semi_colon_splitter(input1 = db$Higher_Geography,
input2 = db$Impact,
names = c("Geography","Impact"))
geo_impact <- na.omit(geo_impact)
bar_2 <- data.frame(table(geo_impact$Geography,geo_impact$Impact))
colnames(bar_2) <- c("geo","Impact","N")
bar_2 <- bar_2[bar_2$geo != "Global",] ; bar_2 <- droplevels(bar_2)
levels(bar_2$Impact)
bar_2$Impact <- factor(bar_2$Impact,levels =
c("None identified",
"Multiple",
"Alien species",
"Climate change",
"Pathogen",
"Poaching",
"Pollution",
"Subterranean habitat change",
"Surface habitat change",
"Visitors"))
(bar_p2 <-  ggplot(bar_2, aes(x=Impact,y=N)) +
facet_wrap( ~ geo, nrow = 2, ncol = 3) +
#ylim(0,70) +
geom_bar(stat="identity",position=position_dodge(), color = "grey20")+
labs(title=NULL, subtitle = NULL,x=NULL, y = "Frequency")+
theme_custom()+
theme(legend.position =  "bottom",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
plot.margin = unit(c(0.2,0.2,0.2,0.2), 'cm'),
strip.text.x=element_text(color = "grey10", face = "bold", size=12),
strip.background = element_rect(colour=NA, fill=NA))
)
pdf(file = "Figure/Threats.pdf", width = 12, height = 7)
bar_p2
dev.off()
#Save figure
pdf(file = "Figure/Meta_analysis.pdf", width = 7, height =5)
meta_analysis
dev.off()
# How many study consider bats and other groups?
a <- ifelse(table(db$ID, db$Taxon_Group)>0,1,0)
table(rowSums(a))
sum(table(rowSums(a))[c(2,3)])/sum(table(rowSums(a)))*100 #3.87 % of studies consider multiple organisms
db_full <-
read.csv(
file = "Data/Master_Database_Cave_Conservation.csv",
sep = '\t',
dec = ',',
header = TRUE,
as.is = FALSE
)
db_full <- db_full[db_full$Remove != "yes",] ; db_full <- droplevels(db_full)
db <- db_full[db_full$Bat_analysis == "yes",] ; db <- droplevels(db)
db$N <- as.numeric(db$N)
# How many study consider bats and other groups?
a <- ifelse(table(db$ID, db$Taxon_Group)>0,1,0)
table(rowSums(a))
sum(table(rowSums(a))[c(2,3)])/sum(table(rowSums(a)))*100 #3.87 % of studies consider multiple organisms
View(db)
#SpatialLayout
Graph_plot <- Graph_unipartite %>%
igraph::simplify(edge.attr.comb = "sum")
library("igraph")
#SpatialLayout
Graph_plot <- Graph_unipartite %>%
igraph::simplify(edge.attr.comb = "sum")
View(bar_2)
library("tidyverse")
library("ggraph")
library("igraph")
library("tidygraph")
db_full <- db_full[db_full$System != "Anchialine/Marine",] ; db_full <- droplevels(db_full)
levels(db_full$Taxon_Group)[c(2,3,4)] <- "Arthropoda"
db <- db[db$Direction_of_effect != "Negative",] ; db <- droplevels(db)
Graph_bipartite <- db_full %>%
dplyr::select(Taxon_Group,Conservation_Action) %>%
table() %>%
igraph::graph_from_incidence_matrix(directed = FALSE) %>%
tidygraph::as_tbl_graph(directed = FALSE)
Graph_bipartite <- Graph_bipartite %>% tidygraph::activate(nodes) %>%
left_join(rbind(data.frame(table(db$Taxon)),
data.frame(table(db$Conservation_Action))), by = c("name" = "Var1"))
# Collapse it into an unipartite
Graph_unipartite_full <- igraph::bipartite_projection(Graph_bipartite)
# Takes the unipartite project graph
Graph_unipartite <- Graph_unipartite_full$proj1  %>% as_tbl_graph(directed = FALSE) %>%
activate(edges) %>% #%>% mutate(weight = 1)
igraph::simplify(edge.attr.comb = "sum") %>%
as_tbl_graph
#SpatialLayout
Graph_plot <- Graph_unipartite %>%
igraph::simplify(edge.attr.comb = "sum")
Graph_plot_bat <- to_subgraph(Graph_unipartite, to %in% c(2) | from %in% c(2), subset_by = "edges")$subgraph %>%
igraph::simplify(edge.attr.comb = "sum")
ggraph::ggraph(Graph_plot_bat,  layout_with_kk(Graph_plot)) +
#geom_edge_density(fill="orange", alpha=1) +
geom_edge_arc(aes(width=weight) , strength = .1,
alpha = 0.1) +
geom_node_point(fill="grey30", alpha = .8,
aes(size=Freq), shape = 21) +
geom_node_text(aes(label = name), size=4, color="gray10", repel=TRUE, force = 10) +
scale_color_gradient2("Connection strength",
low= "#f7fcfd",
mid = "#8c96c6",
high = "#4d004b") +
#scale_fill_manual(values = c("blue", "orange", "pink","purple", "grey15")) +
theme_void() + theme(legend.position = "bottom",legend.direction = "horizontal") + coord_fixed()
Graph_bipartite %>%  igraph::simplify(edge.attr.comb = "sum") %>%
ggraph::ggraph(.,  layout_with_kk(.)) +
geom_edge_arc(
strength = .1,
alpha = 0.3) +
geom_node_point(alpha = .8,
aes(size=Freq, fill=type), shape = 21) +
scale_fill_manual(values=c("blue","red"))+
scale_colour_manual(values=c("blue","red"))+
geom_node_text(aes(label = name, color=type), size=4, repel=TRUE, force = 10) +
theme_void() + theme(legend.position = "bottom",legend.direction = "horizontal") + coord_fixed()
library(ade4) # If you have not already done so
bipartite_matrix <- as_incidence_matrix(Graph_bipartite)  # Extract the matrix
animal_jaccard <- dist.binary(bipartite_matrix, method=1, upper=TRUE, diag = FALSE) # Method #1 is "Jaccard Index"
conservation_jaccard <- dist.binary(t(bipartite_matrix), method=1, upper=TRUE, diag = FALSE)
animal_jaccard <- as.matrix(animal_jaccard)
diag(animal_jaccard)<-0
# women_jaccard          # Look at the matrix before you binarize
animal_jaccard <- ifelse(animal_jaccard>0.8, 1, 0)     # Binarize
animal_jaccard <- graph_from_adjacency_matrix(animal_jaccard,    # Create an igraph network
mode = "undirected")
plot(animal_jaccard)
setwd("/Users/stefanomammola/Desktop/PAPERS IN CORSO/Troglo_achille/Analysis") #change with your working directory
rm(list=ls())
library("BAT")
library("ggplot2")
library("gridExtra")
library("hypervolume")
library("labdsv")
library("lme4")
logisticline_min <- function(z,model) {
eta <- model$coefficients[1]+model$coefficients[2]*z - 1.96*summary(model)$coefficients[2,2];
1 / (1 + exp(-eta))
}
xlab_thermal <- expression(Delta * "T (Critical temperature - Cave temperature) (°C)")
ylab_thermal <- "Survival rate"
color_plot   <- c("darkmagenta","orange","turquoise")
db_morpho <- read.csv("Morphology.csv", header = TRUE, sep=";", dec=".", as.is = FALSE)
str(db_morpho)
#Calculating gower distance
gower.mat <- BAT::gower(T.matrix[,4:21])
barplot(euc.pco$eig)
plot(euc.pco)
n.var <- 4
logisticline <- function(z,model) {
eta <- model$coefficients[1]+model$coefficients[2]*z;
1 / (1 + exp(-eta))
}
logisticline_max <- function(z,model) {
eta <- model$coefficients[1]+model$coefficients[2]*z + 1.96*summary(model)$coefficients[2,2];
1 / (1 + exp(-eta))
}
#Selecting females
T.matrix <- db_morpho[db_morpho$Sex=="Female",]
#Calculating PCoA
euc.pco <- labdsv::pco(gower.mat,k=3)
#Extracting the first 4 PC
HV <- data.frame(species = T.matrix$Species,
PC1     = euc.pco$points[,1],
PC2     = euc.pco$points[,2],
PC3     = euc.pco$points[,3])
hv <- hypervolume_gaussian(subset(HV, species==levels(HV$species)[[max(nlevels(HV$species))]])[,c(2:n.var)],
name = levels(HV$species)[[max(nlevels(HV$species))]],
kde.bandwidth = estimate_bandwidth(subset(HV,species==levels(HV$species)[[max(nlevels(HV$species))]])[,c(2:n.var)],
method = "cross-validation"))
db_thermal2 <- read.table("Thermal.csv", header = TRUE, sep=";", dec=",", as.is = FALSE)
## Removing controls and missing data
db_thermal2 <- db_thermal2[db_thermal2$Control=="no",]
db_thermal2 <- subset(db_thermal2, !is.na(Delta_T))
for (i in levels(factor(db_thermal2$Species))) {
specie <- db_thermal2[db_thermal2$Species == i,]
if (nlevels(factor(specie$Cave)) < 2) {
print("Troglohyphantes")
print(i)
print("Not possible to fit ANOVA: species recorded for just one cave")
print("###################################")
}
else {
print("Troglohyphantes")
print(i)
print(summary(aov(Delta_T ~ Cave,data = specie)))
print(summary(lm(Delta_T ~ Cave,data = specie)))
print("###################################")
}}
#clean
rm(i,specie)
#Rename
levels(db_thermal2$Cave)    <- c("Bocetto","Buco_valenza","Camoscere_sup","Buco_del_Nebin","Tana_del_Diavolo","Tornini","Tuna")
levels(db_thermal2$Species) <- c("T. achillis","T. delphinicus", "T. vignai")
#Order
db_thermal2$Cave <- factor(db_thermal2$Cave,
levels = c("Buco_valenza","Camoscere_sup","Buco_del_Nebin","Bocetto","Tana_del_Diavolo","Tornini","Tuna"),ordered = TRUE)
#Plot
(thermal_plot2 <-
ggplot(db_thermal2, aes(x=Cave, y=Delta_T,fill=Species)) +
geom_boxplot(outlier.colour="white",outlier.size=2)+
coord_flip()+
ylab(xlab_thermal)+
xlab("")+
ylim(0,20)+
scale_fill_manual(values=c("darkmagenta","orange","turquoise"))+
scale_x_discrete(labels=c("Buco di\nValenza","Grotta delle\nCamoscere sup.","Buco del\nNebin","Bocetto\nmine","Tana del\nDiavolo", "Tornini\nmine","Tuna do\nDiau"))+
annotate("text",x=6.91,y=17.9, label="*",size=8)+
annotate("text",x=1,y=19.5, label="(b)",size=11,fontface="bold")+
theme_classic()+
theme(axis.line = element_line(colour = "black",size = 1, linetype = "solid"),
axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16),
axis.text.y = element_text(size=14),
axis.text.x = element_text(size=16, angle=0),
axis.ticks.x = element_blank(),
legend.text = element_text( size = 12, face = "italic"),
legend.title= element_text(size=0),
legend.position = c(0.8, 0.6))
)
db_thermal2
db_thermal <- droplevels(db_thermal2[-which(db_thermal2$Cave == "Tuna"), ] )
# Lethal Temperature
tapply(db_thermal$Lethal_T,db_thermal$Species,mean)
tapply(db_thermal$Lethal_T,db_thermal$Species,sd)
tapply(db_thermal$Lethal_T,db_thermal$Species,min)
tapply(db_thermal$Lethal_T,db_thermal$Species,max)
# Delta temperature
tapply(db_thermal$Delta_T,db_thermal$Species,mean)
tapply(db_thermal$Cave_T,db_thermal$Species,mean)
table(db_thermal$Species)
# Delta temperature
tapply(db_thermal$Delta_T,db_thermal$Species,mean)
rm(list = ls())
library("ggpubr")
library("ggplot2")
library("graphics")
library("PupillometryR") # A Unified Pipeline for Pupillometry Data
library("stats")
library("utils")
library("wosr")
setwd("/Users/stefanomammola/Desktop/PAPERS IN CORSO/Cardoso_et_al_RAT/I_index")
###### can remove later when the package will be in CRAN
map <-
read.table(
"/Users/stefanomammola/Desktop/I_index/centroid_table.csv",
sep = ",",
as.is = TRUE,
header = TRUE
)
###### can remove later when the package will be in CRAN
map <-
read.table(
"centroid_table.csv",
sep = ",",
as.is = TRUE,
header = TRUE
)
# Setting sid
sid <-
auth(NULL, password = NULL) #change with your WoS access (if you have a university VPN, keep it as is)
i_index      <- c()
h_index      <- c()
n_publ       <- c()
for (i in 1:length(data_wos)) {
i_index <- append(i_index, i.index(data_wos[[i]]))
h_index <- append(h_index, h.index(data_wos[[i]]))
n_publ  <- append(n_publ, nrow(data_wos[[i]]$publication))
}
data_wos <- readRDS("data_wos.rds")
a <- c()
for (i in 1:31)
a <- append(a,nrow(data_wos[[i]]$publication))
sum(a)
i_index      <- c()
h_index      <- c()
n_publ       <- c()
for (i in 1:length(data_wos)) {
i_index <- append(i_index, i.index(data_wos[[i]]))
h_index <- append(h_index, h.index(data_wos[[i]]))
n_publ  <- append(n_publ, nrow(data_wos[[i]]$publication))
}
library("RAT")
install.packaes("RAT")
install.packages("RAT")
library("RAT")
i_index      <- c()
h_index      <- c()
n_publ       <- c()
for (i in 1:length(data_wos)) {
i_index <- append(i_index, i.index(data_wos[[i]]))
h_index <- append(h_index, h.index(data_wos[[i]]))
n_publ  <- append(n_publ, nrow(data_wos[[i]]$publication))
}
#storing data in the format for the cor plot
db2 <- data.frame(n_publ,i_index, h_index, year = range_year)
# Extracting University of Helsinki data
range_year <- c(1990:2020)
range_year <- c(1990:2020)
#storing data in the format for the cor plot
db2 <- data.frame(n_publ,i_index, h_index, year = range_year)
(time_plot <- ggplot(db2) +
geom_line(
aes(x = year, y = i_index),
color = "blue",
size = 1.5,
linetype = 1
) +
geom_point(
aes(
x = year,
y = i_index,
size = n_publ
),
color = "grey5",
fill = "blue",
shape = 21
) +
scale_color_manual(values = col) +
scale_fill_manual(values  = col) +
scale_x_continuous(breaks = c(seq(
from = min(range_year),
to = max(range_year),
by = 5
))) +
labs(
x = NULL,
y = "Index value",
size = "Number of publications",
title = NULL,
subtitle = NULL
#caption = "Web of Science data"
) +
theme_bw() +
#guides(size = "none")+
theme(
legend.position = c(0.1,0.8),
legend.title = element_blank(),
legend.text = element_text(size = 10),
legend.background = element_rect(colour = 'grey30', fill = 'white', linetype='solid'),
#plot.title = element_text(color="black", size=14, face="bold"),
axis.title = element_text(size = 12),
axis.text.x = element_text(size = 11),
axis.text.y = element_text(size = 11),
panel.grid = element_blank(),
plot.caption = element_text(size = 10, color = "gray30")
)
)
#data_wos    <- readRDS("data_wos.rds")
wos_2020    <- data_wos[[31]]$author #data from 2020
sample_id   <- sample(1:nrow(wos_2020))[1:300] #take 300 id
wos_2020_sampled <- wos_2020[sample_id,]
# Extracting University of Helsinki data
#data_wos_2020 <- list()
data_wos_2020 <- readRDS("data_wos_2020.rds")
# Extracting WoS data
for (i in 29:nrow(wos_2020_sampled))  {
print(paste("------- Author number: ", i, " -------", sep = ''))
string <- paste("AU = ",
wos_2020_sampled[i,]$display_name, sep = '')
data_wos_2020[[i]] <- wosr::pull_wos(string, editions = coll, sid = sid)
}
i_index      <- c()
h_index      <- c()
n_publ       <- c()
academic_age <- c()
db <- readRDS("authors.rds")
db$area <- as.factor(db$area)
levels(db$area)[3] <- "particle physics"
db$i_index_l <- log(db$i_index+1)
db$h_index_l <- log(db$h_index+1)
#get correlation
as.numeric(round(cor.test(db$i_index_l, db$h_index_l)$estimate, 4))
cor_exp <- expression(paste("Pearson's ",
italic("r"),
" = 0.86"))
#set color
COL <- c("chartreuse3","blue","black","purple")
(plot_cor <- ggplot(db, aes(y = jitter(i_index_l), x = jitter(h_index_l))) +
geom_smooth(
method = lm,
se = FALSE,
col = "grey30",
size = 1,
alpha = 1
) +
geom_point(
aes(fill = area),
color = "grey30",
size= 3,
alpha = 0.8,
shape = 21
) +
scale_fill_manual(values=COL)+
annotate(
geom = "text",
x = 0.7,
y = 2.2,
size = 4,
label = cor_exp,
color = "black",
fontface = "bold"
) +
theme_bw() + labs(
title = "A",
size = "Number of\npublications",
fill = "Field of\nexpertise",
x = "h-index [log-transformed]",
y = "i-index [log-transformed]"
) + theme(
legend.position = c(0.80,0.2),
legend.background = element_rect(colour = 'grey30', fill = 'white', linetype='solid'),
legend.title = element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color="black", size=14, face="bold"),
axis.title = element_text(size = 12),
axis.text.x = element_text(size = 11),
axis.text.y = element_text(size = 11),
panel.grid = element_blank(),
plot.caption = element_text(size = 10, color = "gray30")
)
)
db <- data.frame(db, dev = residuals(lm(i_index_l ~ h_index_l, data = db)))
(plot_dev <-
ggplot(data = db,
aes(x = area, y = dev, fill = area, color = area)) +
geom_flat_violin(aes(color = area, fill = area),position = position_nudge(x = 0.2, y = 0), alpha = 0.4) +
geom_point(aes(y = dev, color = area),
position = position_jitter(width = 0.15), size = 2, alpha = 0.4) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.4) +
labs(title = "B", x = NULL, y= "Deviation from the line (Plot A)") +
geom_hline(yintercept=0, col = "grey30", linetype = "dotted")+
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values =  COL) +
scale_colour_manual(values = COL) +
theme_bw() +
theme(
#legend.position = c(0.8,0.4),
legend.title = element_blank(),
legend.text = element_text(size = 12),
plot.title = element_text(color="black", size=14, face="bold"),
axis.title = element_text(size = 12),
axis.text.x = element_text(size = 11),
axis.text.y = element_text(size = 11),
panel.grid = element_blank(),
plot.caption = element_text(size = 10, color = "gray30")
)
)
