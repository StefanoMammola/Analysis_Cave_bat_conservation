xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor_plot, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 0.8, width = 0.2)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
db_full <-
read.csv(
file = "Data/Master_Database_Cave_Conservation.csv",
sep = '\t',
dec = ',',
header = TRUE,
as.is = FALSE
)
db_full <- db_full[db_full$Remove != "yes",] ; db_full <- droplevels(db_full)
db <- db_full[db_full$Bat_analysis == "yes",] ; db <- droplevels(db)
db$N <- as.numeric(db$N)
# How many study consider bats and other groups?
a <- ifelse(table(db$ID, db$Taxon_Group)>0,1,0)
table(rowSums(a))
sum(table(rowSums(a))[c(2,3)])/sum(table(rowSums(a)))*100 #3.87 % of studies consider multiple organisms
# Selecting only bats
db <- db[db$Taxon_Group == "Bats",] ; db <- droplevels(db)
#Database only with distinct paper
db_unique <- distinct(db, ID, .keep_all = TRUE)
#Checking levels of factors
levels(db$Taxon_Group)
levels(db$Tested_statistically)
levels(db$Higher_Geography)
levels(db$System)
levels(db$Domain)
levels(db$Impact)
levels(db$Conservation_Group)
levels(db$Conservation_Action)
#Type of actions
table(db$Publication_type)
#Summary statistics (Literature)
table(db_unique$Source) ; sum(table(db_unique$Source)) # N° of unique sources
mean(table(db$ID)) ; SE(table(db$ID)) # mean number of actions/paper
#Summary statistics (Testing)
table(db$Tested_statistically)[2] / sum(table(db$Tested_statistically)) #N° and % testing
#How many estimates would be usable for meta analysis?
n_studies    <- c()
n_estimates  <- c()
perc_testing <- c()
usable       <- c()
unusable     <- c()
perc_usable  <- c()
for(i in 1:nlevels(db$Conservation_Action)){
db_i_tot <- db[db$Conservation_Action == levels(db$Conservation_Action)[i],]
db_i     <- db_i_tot[db_i_tot$Tested_statistically == "yes",]
table_i        <- table(db_i$Pearson_r_conversion) #% of usable statistics
n_studies      <- c(n_studies, nrow(distinct(db_i, ID, .keep_all = TRUE)) ) #unique studies
n_estimates    <- c(n_estimates, nrow(db_i) ) #unique estimates
perc_testing   <- c(perc_testing, round(nrow(db_i)/nrow(db_i_tot),2)*100 )
usable         <- c(usable, sum(table_i[1],table_i[3]))
unusable       <- c(unusable, sum(table_i[2]))
perc_usable    <- c(perc_usable, round((usable[i]/sum(table_i)),2)*100)
}
Table_1 <- data.frame(Intervention = levels(db$Conservation_Action), n_studies, n_estimates, perc_testing, usable, unusable, perc_usable)
Table_1[is.na(Table_1)] <- 0
colnames(Table_1) <- c("Intervention", "N° studies", "N° interventions", "% testing", "N° usable", "N° unusable", "% usable")
write.csv(Table_1,"Tables/Table_1.csv")
#Redefining levels
levels(db$Impact)[2] <- "Multiple"
levels(db$Conservation_Action)[5] <- "Gating"
db_metafor <- db[db$Tested_statistically == "yes",]
db_metafor <- db_metafor[db_metafor$Pearson_r_conversion == "converted",]
db_metafor <- droplevels(db_metafor)
dim(db_metafor)
nlevels(db_metafor$ID) #250 references
db_metafor <- db_metafor %>% select(ID,
N,
Domain,
System,
Family,
Response_Group,
Predictor_Group,
r = Pearson.s_r)
db_metafor <- metafor::escalc(measure = "COR", ri = r, ni = N, data = db_metafor)
# Gate
db_metafor <- db_metafor[db_metafor$Predictor_Group == "Gate" |
db_metafor$Predictor_Group == "Disturbance reduction" |
db_metafor$Predictor_Group == "Restoration", ] ; db_metafor <- droplevels(db_metafor)
table(db_metafor$Predictor_Group,db_metafor$Response_Group) # Disturbance reduction & Gate
db_metafor <- db_metafor[!c(db_metafor$Predictor_Group == "Disturbance reduction" & db_metafor$Response_Group == "Population"),]
#Check sample size for each predictors
table_n <- data.frame(predictor = NULL, n = NULL, n_papers = NULL)
for(i in 1:length(unique(levels(db_metafor$Response_Group))))
table_n <- rbind(table_n,
data.frame(predictor = levels(db_metafor$Response_Group)[i],
n = nrow(db_metafor[db_metafor$Response_Group == levels(db_metafor$Response_Group)[i], ]),
n_papers = length(unique(db_metafor[db_metafor$Response_Group == levels(db_metafor$Response_Group)[i], ]$ID)))
)
db_metafor <- db_metafor[db_metafor$Response_Group != "Survival",]
actions_to_analyse    <- c("Disturbance reduction", "Gate", "Restoration")
SUBSET    <- list()
MODEL     <- list()
result_for_plot <- data.frame(label_action = NULL,
label_pred = NULL,
size = NULL,
b     = NULL,
ci.lb = NULL,
ci.ub = NULL,
ES    = NULL,
L     = NULL,
U     = NULL)
# Modelling
for (j in 1:length(actions_to_analyse)){
data_j  <- db_metafor[db_metafor$Predictor_Group == actions_to_analyse[j], ] ; data_j <- droplevels(data_j)
predictors_to_analyse <- levels(data_j$Response_Group)
for (i in 1:length(predictors_to_analyse)){
#subset the predictor
data_i  <- data_j[data_j$Response_Group == predictors_to_analyse[i], ]
if(nrow(data_i)<2) { NULL } else {
#fitting the model
model_i <- rma.mv(yi, vi, random =  ~ 1 | ID, data = na.omit(data_i))
#extracting coefficients
result_for_plot_i <- data.frame(label_action =  actions_to_analyse[j],
label_pred = paste(predictors_to_analyse[i]," (" ,
nrow(data_i),", ",
length(unique(data_i$ID)),")",sep=''),
size = length(unique(data_i$ID)),
b     = model_i$b,
ci.lb = model_i$ci.lb,
ci.ub = model_i$ci.ub,
ES    = ((exp(model_i$b)-1))/((exp(model_i$b)+1)),
L     = ((exp(model_i$ci.lb)-1)/(exp(model_i$ci.lb)+1)),
U     = ((exp(model_i$ci.ub)-1)/(exp(model_i$ci.ub)+1)))
#store the data
SUBSET[[i]]     <- data_i
MODEL[[i]]      <- model_i
result_for_plot <- rbind(result_for_plot,result_for_plot_i)
}}
}
rownames(result_for_plot) <- NULL
ORDER <- as.character(result_for_plot$label_pred)
result_for_plot$label_pred <- factor(result_for_plot$label_pred, ORDER) #sort
#Converting multiple families as multiple
family_split <- strsplit(as.character(db_metafor$Family), ";")
family <- c()
for(i in 1:length(family_split))
family <- c(family, ifelse(length(family_split[[i]]) > 1, "Multiple", family_split[[i]]) )
db_metafor$Family <- family
new_name <- factor(paste(db_metafor$Predictor_Group, db_metafor$Response_Group))
levels(new_name) <- ORDER
db_metafor <- data.frame(db_metafor,new_name)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor_plot, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 0.8, width = 0.2)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
View(db_metafor_plot)
###############################################################
## Practical conservation of bats in subterranean habitats
## Meierhofer M., ... Mammola S.
## ------------------------------------------------------------------------
# 'R script to reproduce the analyses'
## ------------------------------------------------------------------------
# Analysis performed with R (v. R 4.1.0) and R studio (v. 1.4.1103)
# Authors (code): Stefano Mammola & Melissa B. Meierhofer
###############################################################
# clean the workspace -----------------------------------------------------
rm(list = ls())
# Loading R package -------------------------------------------------------
library("metafor")   # Meta-Analysis Package for R
library("ggplot2")
library("tidyverse")
library("circlize")
library("cowplot")
library("dplyr")
library("ggplot2")
library("ggpubr")
library("grid")
library("gridExtra")
library("maps")
library("rsq")
library("parameters")
library("performance")
library("scatterpie")
library("tidyr")
library("tidygraph")
library("ggraph")
# Sourcing useful functions ------------------------------------------------
source("Functions/Functions_bat.R")
###############################################################
## Data preparation:
###############################################################
# Loading the Database ----------------------------------------------------
db_full <-
read.csv(
file = "Data/Master_Database_Cave_Conservation.csv",
sep = '\t',
dec = ',',
header = TRUE,
as.is = FALSE
)
# Removing duplicates
db_full <- db_full[db_full$Remove != "yes",] ; db_full <- droplevels(db_full)
#Subselecting BAT studies
db <- db_full[db_full$Bat_analysis == "yes",] ; db <- droplevels(db)
db$N <- as.numeric(db$N)
# How many study consider bats and other groups?
a <- ifelse(table(db$ID, db$Taxon_Group)>0,1,0)
table(rowSums(a))
sum(table(rowSums(a))[c(2,3)])/sum(table(rowSums(a)))*100 #3.87 % of studies consider multiple organisms
# Selecting only bats
db <- db[db$Taxon_Group == "Bats",] ; db <- droplevels(db)
#Database only with distinct paper
db_unique <- distinct(db, ID, .keep_all = TRUE)
#Checking levels of factors
levels(db$Taxon_Group)
levels(db$Tested_statistically)
levels(db$Higher_Geography)
levels(db$System)
levels(db$Domain)
levels(db$Impact)
levels(db$Conservation_Group)
levels(db$Conservation_Action)
#Type of actions
table(db$Publication_type)
#Summary statistics (Literature)
table(db_unique$Source) ; sum(table(db_unique$Source)) # N° of unique sources
mean(table(db$ID)) ; SE(table(db$ID)) # mean number of actions/paper
#Summary statistics (Testing)
table(db$Tested_statistically)[2] / sum(table(db$Tested_statistically)) #N° and % testing
#How many estimates would be usable for meta analysis?
n_studies    <- c()
n_estimates  <- c()
perc_testing <- c()
usable       <- c()
unusable     <- c()
perc_usable  <- c()
for(i in 1:nlevels(db$Conservation_Action)){
db_i_tot <- db[db$Conservation_Action == levels(db$Conservation_Action)[i],]
db_i     <- db_i_tot[db_i_tot$Tested_statistically == "yes",]
table_i        <- table(db_i$Pearson_r_conversion) #% of usable statistics
n_studies      <- c(n_studies, nrow(distinct(db_i, ID, .keep_all = TRUE)) ) #unique studies
n_estimates    <- c(n_estimates, nrow(db_i) ) #unique estimates
perc_testing   <- c(perc_testing, round(nrow(db_i)/nrow(db_i_tot),2)*100 )
usable         <- c(usable, sum(table_i[1],table_i[3]))
unusable       <- c(unusable, sum(table_i[2]))
perc_usable    <- c(perc_usable, round((usable[i]/sum(table_i)),2)*100)
}
Table_1 <- data.frame(Intervention = levels(db$Conservation_Action), n_studies, n_estimates, perc_testing, usable, unusable, perc_usable)
Table_1[is.na(Table_1)] <- 0
colnames(Table_1) <- c("Intervention", "N° studies", "N° interventions", "% testing", "N° usable", "N° unusable", "% usable")
write.csv(Table_1,"Tables/Table_1.csv")
#Redefining levels
levels(db$Impact)[2] <- "Multiple"
levels(db$Conservation_Action)[5] <- "Gating"
###############################################################
## Meta-Analysis
###############################################################
db_metafor <- db[db$Tested_statistically == "yes",]
db_metafor <- db_metafor[db_metafor$Pearson_r_conversion == "converted",]
db_metafor <- droplevels(db_metafor)
dim(db_metafor)
nlevels(db_metafor$ID) #250 references
db_metafor <- db_metafor %>% select(ID,
N,
Domain,
System,
Family,
Response_Group,
Predictor_Group,
r = Pearson.s_r)
# Derive Fischer's Z and its variance
db_metafor <- metafor::escalc(measure = "COR", ri = r, ni = N, data = db_metafor)
# Gate
db_metafor <- db_metafor[db_metafor$Predictor_Group == "Gate" |
db_metafor$Predictor_Group == "Disturbance reduction" |
db_metafor$Predictor_Group == "Restoration", ] ; db_metafor <- droplevels(db_metafor)
table(db_metafor$Predictor_Group,db_metafor$Response_Group) # Disturbance reduction & Gate
db_metafor <- db_metafor[!c(db_metafor$Predictor_Group == "Disturbance reduction" & db_metafor$Response_Group == "Population"),]
#Check sample size for each predictors
table_n <- data.frame(predictor = NULL, n = NULL, n_papers = NULL)
for(i in 1:length(unique(levels(db_metafor$Response_Group))))
table_n <- rbind(table_n,
data.frame(predictor = levels(db_metafor$Response_Group)[i],
n = nrow(db_metafor[db_metafor$Response_Group == levels(db_metafor$Response_Group)[i], ]),
n_papers = length(unique(db_metafor[db_metafor$Response_Group == levels(db_metafor$Response_Group)[i], ]$ID)))
)
db_metafor <- db_metafor[db_metafor$Response_Group != "Survival",]
actions_to_analyse    <- c("Disturbance reduction", "Gate", "Restoration")
SUBSET    <- list()
MODEL     <- list()
result_for_plot <- data.frame(label_action = NULL,
label_pred = NULL,
size = NULL,
b     = NULL,
ci.lb = NULL,
ci.ub = NULL,
ES    = NULL,
L     = NULL,
U     = NULL)
# Modelling
for (j in 1:length(actions_to_analyse)){
data_j  <- db_metafor[db_metafor$Predictor_Group == actions_to_analyse[j], ] ; data_j <- droplevels(data_j)
predictors_to_analyse <- levels(data_j$Response_Group)
for (i in 1:length(predictors_to_analyse)){
#subset the predictor
data_i  <- data_j[data_j$Response_Group == predictors_to_analyse[i], ]
if(nrow(data_i)<2) { NULL } else {
#fitting the model
model_i <- rma.mv(yi, vi, random =  ~ 1 | ID, data = na.omit(data_i))
#extracting coefficients
result_for_plot_i <- data.frame(label_action =  actions_to_analyse[j],
label_pred = paste(predictors_to_analyse[i]," (" ,
nrow(data_i),", ",
length(unique(data_i$ID)),")",sep=''),
size = length(unique(data_i$ID)),
b     = model_i$b,
ci.lb = model_i$ci.lb,
ci.ub = model_i$ci.ub,
ES    = ((exp(model_i$b)-1))/((exp(model_i$b)+1)),
L     = ((exp(model_i$ci.lb)-1)/(exp(model_i$ci.lb)+1)),
U     = ((exp(model_i$ci.ub)-1)/(exp(model_i$ci.ub)+1)))
#store the data
SUBSET[[i]]     <- data_i
MODEL[[i]]      <- model_i
result_for_plot <- rbind(result_for_plot,result_for_plot_i)
}}
}
rownames(result_for_plot) <- NULL
ORDER <- as.character(result_for_plot$label_pred)
result_for_plot$label_pred <- factor(result_for_plot$label_pred, ORDER) #sort
#Converting multiple families as multiple
family_split <- strsplit(as.character(db_metafor$Family), ";")
family <- c()
for(i in 1:length(family_split))
family <- c(family, ifelse(length(family_split[[i]]) > 1, "Multiple", family_split[[i]]) )
db_metafor$Family <- family
# renaming Response group as in the result_for_plot
new_name <- factor(paste(db_metafor$Predictor_Group, db_metafor$Response_Group))
levels(new_name) <- ORDER
db_metafor <- data.frame(db_metafor,new_name)
db_metafor
View(db_metafor)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor_plot, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 0.8, width = 0.2, pch = 21)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 0.8, width = 0.2, pch = 21)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family),
size = 0.8, width = 0.2, pch = 21)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
db_metafor$Family
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family, col = Response_group),
size = 0.8, width = 0.2, pch = 21)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
colnames(db_metafor)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family, col = Response_Group),
size = 0.8, width = 0.2, pch = 21)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
colnames(db_metafor)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 0.8, width = 0.2, pch = 21)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 0.8, width = 0.2)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 2, width = 0.2)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 1.5, width = 0.2)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
#Save figure
pdf(file = "Figure/Meta_analysis.pdf", width = 7, height =5)
meta_analysis
dev.off()
#Save figure
pdf(file = "Figure/Meta_analysis.pdf", width = 9, height =5)
meta_analysis
dev.off()
plot_r <- semi_colon_splitter(input1 = db_metafor$Family,
input2 = db_metafor$r,
names = c("Species","r"))
(meta_analysis <- ggplot(data= result_for_plot) +
geom_hline(yintercept = 0, lty = 2, col = "grey50") +  # add a dotted line at x=1 after flip
xlab("")+
ylab("Effect size [r]")+
geom_jitter(data = db_metafor, aes(x = new_name, y = r, shape = Family, col = Predictor_Group),
size = 1.5, width = 0.2, aplha =0.8)+
geom_pointrange(aes(x=label_pred, y=ES, ymin=L, ymax=U, col= label_action), size = 1) +
scale_color_manual("Conservation action", values = c("darkmagenta","grey10","darkcyan"))+
scale_shape_manual("Taxon", values = c(1,2,3))+
coord_flip() +
theme_custom() + theme(legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(face= c("plain","bold","plain","bold","plain")))) # flip coordinates (puts labels on y axis)
#Save figure
pdf(file = "Figure/Meta_analysis.pdf", width = 9, height =5)
meta_analysis
dev.off()
